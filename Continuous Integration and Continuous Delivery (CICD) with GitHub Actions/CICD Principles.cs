CI / CD Принципи:
Едно източно хранилище(Source Repository)
Описание: Това е единно хранилище(например Git репозиториум), в който се съхраняват всички файлове, нужни за изграждане на проекта. 
Това включва не само кода, но и скриптове за миграция на базата данни, библиотеки и конфигурационни файлове.

Пример в реална среда:
Имаме Git репозиториум, който съдържа всички изходни кодове на приложение, както и SQL скриптове за създаване на таблици в базата данни.
В този репозиториум може да има различни папки, например:
src / за изходния код,
database/ за скриптове за база данни,
libs/ за външни библиотеки,
scripts/ за различни автоматизирани процеси.

Примерна структура на хранилището:
my_project/
├── src/
│   └── main/
├── database/
│   └── migrations/
├── libs/
└── scripts/


Чести итерации и check-ins в основния клон (Frequent Iterations and Check-ins to the Main Branch)

Описание: Честото качване на малки промени в основния клон (main branch) позволява бързо интегриране на нови функции и намалява риска от конфликти, когато се обединяват промените на различни разработчици.

Пример в реална среда:
В ежедневната работа на junior developer може да се наложи да добавя нови малки функции или да поправя бъгове в приложение.
След като завърши работа по определена задача, той трябва бързо да качи тези промени в основния клон, за да ги интегрира с останалата част от екипа.

Например: работите по добавяне на нова страница в сайта и след като завършите с изграждането й, ще качите промените в основния клон с коментар “Добавена е новата страница”.
Използване на малки сегменти от код (Small Segments of Code)
Описание: Вместо да се правят големи промени, които ще бъдат интегрирани на по-късен етап, е по-добре да се работи с малки части от код, които често се обединяват с основния клон. 
Това намалява риска от грешки и конфликтни ситуации.

Пример в реална среда:
Junior developer започва да добавя нова функционалност към сайт (например форма за вход), но вместо да изгражда цялата форма за вход наведнъж, 
той може да добави малки функционалности като полета за потребителско име и парола и да ги качи в основния клон. 
Това помага за по-лесно тестване и интеграция.


Автоматизирани и само-тестиращи се билдове (Automated and Self-Testing Builds)
Описание: Когато качите промени в основния клон, е важно тези промени автоматично да преминат през тестове, за да се уверите, че не са нарушили нищо в проекта. 
Това често се прави с помощта на CI/CD инструменти, като Jenkins, GitLab CI, CircleCI и други.
Пример в реална среда:
След като качите промените, CI/CD системата автоматично ще започне процеса на билдване (създаване на компилирана версия на приложението) и тестване на новите функции, за да гарантира, че всичко работи както трябва.
Например: когато качите промени в репозиториума, системата автоматично ще стартира тестове за проверка на новата функционалност (например, дали форма за вход работи коректно).

Таблица на CI/CD процесите:
Принцип                           Описание	                                                            Пример
Едно източно хранилище	          Всичко нужно за билдване е в едно хранилище.	                        Git репозиториум с код, бази данни, скриптове.
Чести итерации	                  Малки промени, които често се качват в основния клон.	                Честото качване на малки промени в основния клон.
Малки сегменти от код	          Работа с малки части от код, които се качват редовно.	                Добавяне на функционалности на малки стъпки.
Автоматизирани билдове и тестове  Използване на CI/CD инструменти за автоматизация на тестовете.	    Jenkins или GitLab стартиране на тестове след commit.